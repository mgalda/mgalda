% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/superlearner.R
\name{superlearner}
\alias{superlearner}
\alias{bagging}
\alias{bagging.default}
\alias{bagging.data.frame}
\alias{bagging.matrix}
\alias{bagging.formula}
\alias{bagging.recipe}
\title{superlearner}
\usage{
bagging(x, ...)

\method{bagging}{default}(x, ...)

\method{bagging}{data.frame}(
  x,
  y,
  times = 11L,
  control = list(var_imp = TRUE, sampling = "none"),
  num_terms = NULL,
  prod_degree = 1,
  prune_method = "none",
  tree_depth = 4,
  min_n = ncase(nrow(x)),
  cost_complexity = 0.1
)

\method{bagging}{matrix}(
  x,
  y,
  times = 11L,
  control = list(var_imp = TRUE, sampling = "none"),
  num_terms = NULL,
  prod_degree = 1,
  prune_method = "none",
  tree_depth = 4,
  min_n = ncase(nrow(x)),
  cost_complexity = 0.1
)

\method{bagging}{formula}(
  formula,
  data,
  times = 11L,
  control = list(var_imp = TRUE, sampling = "none"),
  num_terms = NULL,
  prod_degree = 1,
  prune_method = "none",
  tree_depth = 4,
  min_n = ncase(nrow(data)),
  cost_complexity = 0.1
)

\method{bagging}{recipe}(
  x,
  data,
  times = 11L,
  control = list(var_imp = TRUE, sampling = "none"),
  num_terms = NULL,
  prod_degree = 1,
  prune_method = "none",
  tree_depth = 4,
  min_n = ncase(nrow(data)),
  cost_complexity = 0.1
)
}
\description{
superlearner

Fit a bagging
}
\examples{


\dontrun{
dataset_multiclass <- datalearn$penguins_lite \%>\% tidyr::drop_na()

dataset_class <- datalearn$wa_churn \%>\% tidyr::drop_na()

dataset_class <- nearmiss(dataset_class, class_var = churn)

dataset_reg <- datalearn$housing_market \%>\% tidyr::drop_na()

init_multiclass <-
  init_model(
    dataset = dataset_multiclass,
    outcome = species
  )

init_class <-
  init_model(
    dataset = dataset_class,
    outcome = churn
  )

init_reg <-
  init_model(
    dataset = dataset_reg,
    outcome = sales_price
  )


## ensemble_models

ensemble_multiclass <-
  ensemble_models(
    x = init_multiclass,
    times = 4,
    rep = 4,
    cross = F
  )

ensemble_class <-
  ensemble_models(
    x = init_class,
    times = 4,
    cross = F,
    rep = 4
  )

ensemble_reg <-
  ensemble_models(
    x = init_reg,
    cross = F,
    times = 4,
    rep = 4
  )

ensemble_reg$full_fits
ensemble_multiclass$full_fits
ensemble_class$full_fits


fitensemble_multiclass <-
  fit_libraries(x = ensemble_multiclass)

fitensemble_multiclass

fitensemble_class <-
  fit_libraries(x = ensemble_class)

fitensemble_class

fitensemble_reg <-
  fit_libraries(x = ensemble_reg)

fitensemble_reg

stackingensemble_multiclass <-
  build_stacking(x = fitensemble_multiclass)

stackingensemble_multiclass

stackingensemble_class <-
  build_stacking(x = fitensemble_class)

stackingensemble_class

stackingensemble_reg <-
  build_stacking(x = fitensemble_reg, allow_par = T)

stackingensemble_reg

softvotingensemble_multiclass <-
  build_softvoting(x = fitensemble_multiclass)

softvotingensemble_class <-
  build_softvoting(x = fitensemble_class)

softvotingensemble_reg <-
  build_softvoting(x = fitensemble_reg)

table(
  dataset_class$churn,
  predict(
    object = stackingensemble_class,
    new_data = dataset_class
  )$.pred_class
)

table(
  dataset_multiclass$species,
  predict(object = stackingensemble_multiclass,
          new_data = dataset_multiclass)$.pred_class
)

predict(object = softvotingensemble_reg, new_data = dataset_reg[1:10, ])

table(
  dataset_class$churn,
  predict(object = softvotingensemble_class, new_data = dataset_class)$.pred_class
)

table(
  dataset_multiclass$species,
  predict(object = softvotingensemble_multiclass,
          new_data = dataset_multiclass)$.pred_class
)

rec_multiclass <-
  recipes::recipe(species ~ ., data = dataset_multiclass)

rec_class <-
  recipes::recipe(churn ~ ., data = dataset_class)

rec_reg <-
  recipes::recipe(sales_price ~ ., data = dataset_reg)


bagging_multiclass <-
  bagging(x = rec_multiclass, data = dataset_multiclass, times = 30)
bagging_reg <- bagging(x = rec_reg, data = dataset_reg)
bagging_class <- bagging(x = rec_class, data = dataset_class)

bagging_multiclass
bagging_reg
bagging_class


table(
  dataset_multiclass$species,
  predict(bagging_multiclass, dataset_multiclass)$.pred_class
)
table(
  dataset_class$churn,
  predict(bagging_class, dataset_class)$.pred_class
)
yardstick::rsq_trad_vec(truth = dataset_reg$sales_price,
                        predict(bagging_reg, dataset_reg)$.pred)

bagging_multiclass <-
  bagging(species ~ ., data = dataset_multiclass, times = 30)
bagging_class <-
  bagging(churn ~ ., data = dataset_class)
bagging_reg <-
  bagging(sales_price ~ .,data = dataset_reg)

table(
  dataset_multiclass$species,
  predict(bagging_multiclass, dataset_multiclass)$.pred_class
)
table(
  dataset_class$churn,
  predict(bagging_class, dataset_class)$.pred_class
)
yardstick::rsq_trad_vec(truth = dataset_reg$sales_price,
                        predict(bagging_reg, dataset_reg)$.pred)

rm(list = ls())
}



}
\keyword{internal}
