% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assert_inheritance.R
\name{inheritance_tools}
\alias{inheritance_tools}
\alias{is_unique_scalar}
\alias{is_bool}
\alias{is_prls}
\alias{is_l}
\alias{is_vct}
\alias{is_frm}
\alias{is_fn}
\alias{is_mtx}
\alias{is_tbl}
\alias{is_str}
\alias{is_atomic}
\alias{is_vector}
\alias{is_sf}
\alias{is_num}
\alias{is_sorted}
\alias{is_increasing}
\alias{is_df}
\alias{is_nonnum}
\alias{is_numvalid}
\alias{is_even}
\alias{is_fctchr}
\alias{is_dblint}
\alias{is_odd}
\alias{is_true}
\alias{is_nottrue}
\alias{is_false}
\alias{is_nonempty}
\alias{is_empty}
\alias{is_emptyna}
\alias{is_valid}
\alias{is_named}
\alias{is_name}
\alias{is_prob}
\alias{is_try}
\alias{is_call}
\alias{is_symbol}
\alias{is_same_type}
\alias{is_integerish}
\alias{is_na_value}
\alias{is_dbl}
\alias{is_int}
\alias{is_chr}
\alias{is_fct}
\alias{is_symname}
\alias{is_expr}
\alias{is_lazy_dots}
\alias{is_quosures}
\alias{is_lazy}
\alias{is_valid_name}
\alias{is_installed}
\alias{is_null}
\alias{is_existing}
\alias{is_formula}
\alias{is_equal}
\alias{is_equal.default}
\alias{is_equal.numeric}
\alias{is_equal.integer}
\alias{is_equal.double}
\alias{is_colour}
\alias{is_colour.character}
\alias{is_colour.numeric}
\alias{is_colour.logical}
\alias{is_colour.factor}
\alias{is_onesided_frm}
\alias{is_twosided_frm}
\alias{is_monotonic_increasing}
\alias{is_monotonic_decreasing}
\alias{is_inrange}
\alias{is_string}
\alias{is_number}
\alias{is_dir}
\alias{is_syntactic_literal}
\alias{is_pairlist}
\alias{all_named}
\alias{is_discrete}
\alias{is_env}
\alias{is_emptyenv}
\alias{are_named}
\alias{have_name}
\alias{are_double}
\alias{are_chr}
\alias{are_dblint}
\alias{are_fctchr}
\alias{are_prob}
\alias{are_increasing}
\alias{are_sorted}
\alias{any_nonnum}
\alias{have_same_length}
\alias{have_same_dims}
\alias{has_vectors_same_length}
\alias{has_vectors_disjoint}
\alias{are_na}
\alias{are_null}
\alias{are_integerish}
\alias{has_length}
\alias{has_seed}
\title{test inheritance}
\usage{
is_unique_scalar(x)

is_bool(x)

is_prls(x)

is_l(x)

is_vct(x)

is_frm(x)

is_fn(x)

is_mtx(x)

is_tbl(x)

is_str(x, string = NULL)

is_atomic(x, .len = NULL)

is_vector(x, .len = NULL, .min_len = NULL, .max_len = NULL)

is_sf(x)

is_num(x, .int = FALSE, .pos = FALSE, .finite = TRUE)

is_sorted(x)

is_increasing(x)

is_df(x)

is_nonnum(x)

is_numvalid(x)

is_even(x)

is_fctchr(x)

is_dblint(x)

is_odd(x)

is_true(x)

is_nottrue(x)

is_false(x)

is_nonempty(x)

is_empty(x)

is_emptyna(x)

is_valid(x)

is_named(x)

is_name(x)

is_prob(x)

is_try(x)

is_call(x, name = NULL, n = NULL, ns = NULL)

is_symbol(x, name = NULL)

is_same_type(x, y)

is_integerish(x, n = NULL, finite = NULL)

is_na_value(x)

is_dbl(x, n = NULL, finite = FALSE)

is_int(x, n = NULL, finite = FALSE)

is_chr(x)

is_fct(x)

is_symname(x)

is_expr(x)

is_lazy_dots(x)

is_quosures(x)

is_lazy(x)

is_valid_name(x)

is_installed(pkg)

is_null(x)

is_existing(
  x,
  envir = parent.frame(),
  inherits = TRUE,
  .xname = names_in_parent(x)
)

is_formula(x, scoped = NULL, lhs = NULL)

is_equal(x, y, ...)

\method{is_equal}{default}(x, y, ..., by_element = TRUE)

\method{is_equal}{numeric}(x, y, .tol = 0.0001, by_element = TRUE)

\method{is_equal}{integer}(x, y, .tol = 0, by_element = TRUE)

\method{is_equal}{double}(x, y, .tol = 0.0001, by_element = TRUE)

is_colour(x)

\method{is_colour}{character}(x)

\method{is_colour}{numeric}(x)

\method{is_colour}{logical}(x)

\method{is_colour}{factor}(x)

is_onesided_frm(x, ...)

is_twosided_frm(x, ...)

is_monotonic_increasing(x, strictly = FALSE, .xname = names_in_parent(x))

is_monotonic_decreasing(x, strictly = FALSE)

is_inrange(x, xmin = 0, xmax = 1)

is_string(x)

is_number(x)

is_dir(path)

is_syntactic_literal(x)

is_pairlist(x)

all_named(x)

is_discrete(x)

is_env(x)

is_emptyenv(x)

are_named(x)

have_name(x)

are_double(x)

are_chr(x)

are_dblint(x)

are_fctchr(x)

are_prob(x)

are_increasing(x)

are_sorted(x)

any_nonnum(x)

have_same_length(x, y)

have_same_dims(x, y)

has_vectors_same_length(v1, v2)

has_vectors_disjoint(v1, v2)

are_na(x)

are_null(x)

are_integerish(x)

has_length(x, n = NULL)

has_seed()
}
\description{
test inheritance
}
\keyword{internal}
