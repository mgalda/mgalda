% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cluster_tools.R
\name{cluster_descriptions}
\alias{cluster_descriptions}
\alias{cluster_tools}
\alias{runskmeans}
\alias{runskmeans.default}
\alias{runskmeans.data.frame}
\alias{cluster_boot}
\alias{cluster_boot.default}
\alias{cluster_boot.data.frame}
\alias{cluster_stats}
\alias{neig_centers}
\alias{equal_size_cluster}
\alias{optimize_cluster}
\title{cluster_descriptions}
\usage{
cluster_descriptions(data, ...)

runskmeans(x, ...)

\method{runskmeans}{default}(x, ...)

\method{runskmeans}{data.frame}(x, krange = 5:10, criterion = c("ch", "asw"), runs = 25, limit = 10)

cluster_boot(x, ...)

\method{cluster_boot}{default}(x, ...)

\method{cluster_boot}{data.frame}(
  x,
  krange = 10:15,
  criterion = c("ch", "asw"),
  runs = 100,
  rep = 3,
  times = 10,
  limit = 10
)

cluster_stats(x, clustering, w = NULL, ...)

neig_centers(x, ...)

equal_size_cluster(x, ...)

optimize_cluster(
  .data,
  threshold = 0.1,
  times = 5,
  rep = 3,
  interval = c(2, 25)
)
}
\arguments{
\item{...}{variables por las cuales se agrupara}

\item{x}{dataset}

\item{krange}{vector con la cantidad de cluster a evaluar}

\item{criterion}{criterio de desicion de cluster. "ch" or "asw".
Calinski-Harabasz criterion o average silhouette width.}

\item{runs}{n centros aleatorios iniciales}

\item{limit}{limite de desicion de seleccion para buscar
el modelo mas siemple entre con 'limit' corete}

\item{rep}{repeticiones}

\item{times}{particiones}

\item{.data}{dataset}

\item{threshold}{tolerancia}

\item{interval}{intervalo de busqueda}

\item{neighbors}{cantidad de observaciones a buscar}

\item{k}{numero de observaciones por cluster}

\item{max_rep}{max numero de repeticiones}

\item{no_improve}{numero de repeticiones continuas sin mejora
para detener el algotitmo}

\item{verbose}{print resultados del loop}

\item{tolerance}{tolerancia}

\item{statfn}{funcion a optimizar}
}
\description{
generar un perfil de cada cluster

encontrar el k neighbors mas cercano al centro
}
\examples{
set.seed(7)

object<-cluster_descriptions(data = mgalda::datalearn$iris[,1:2], krange = 3:10)
autoplot(object)
rm(list = ls())
set.seed(7)
#'
object<-runskmeans(x = mgalda::datalearn$iris[,1:2], krange = 5:20)
autoplot(object,sepal_length,sepal_width)

rm(list = ls())
set.seed(7)

object <-
  cluster_boot(
    x = mgalda::datalearn$iris[, 1:2],
    krange = 4:15,
    rep = 2,
    times = 4
  )
autoplot(object, sepal_length, sepal_width)

rm(list = ls())
set.seed(7)

cluster_stats(x = mgalda::datalearn$iris[, 1:4], clustering = kmeans(x = mgalda::datalearn$iris[, 1:4], centers = 5)$cluster)
set.seed(7)

neig_centers(x = mgalda::datalearn$iris, species, neighbors = 1)
set.seed(7)

object <-
  equal_size_cluster(
    x = mgalda::datalearn$iris[, 1:2],
    k = 10,
    max_rep = 100
  )
autoplot(object, sepal_length, sepal_width)

rm(list = ls())
set.seed(7)

optimize_cluster(.data = mgalda::datalearn$iris, interval = c(4, 10))

rm(list = ls())
}
