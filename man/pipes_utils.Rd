% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{pipes_utils}
\alias{pipes_utils}
\title{util}
\description{
util
}
\examples{

\dontrun{
cons_res <- function(r1, r2, r3, r4) {
  list(
    "\%>\%" = r1,
    "\%|>\%" = r2,
    "\%!>\%" = r3,
    "\%?>\%" = r4
  )
}

## ej1

foo4 <- foo3 <- foo2 <- foo1 <- FALSE
TRUE \%>\% assign("foo1", .)
TRUE \%|>\% assign("foo2", .)
TRUE \%!>\% assign("foo3", .)
TRUE \%?>\% assign("foo4", .)

cons_res(foo1,foo2,foo3,foo4)

## ej2

foo1 <- function() {
  TRUE \%>\% return()
  FALSE
}
foo2 <- function() {
  TRUE \%|>\% return()
  FALSE
}
foo3 <- function() {
  TRUE \%!>\% return()
  FALSE
}
foo4 <- function() {
  TRUE \%?>\% return()
  FALSE
}

cons_res(foo1(),foo2(),foo3(),foo4())

## ej3

foobar <- function(x) x \%>\% quux()
quux <- function(x) x \%>\% stop()

"tilt" \%>\% foobar()
foo1<-rlang::last_trace()

foobar <- function(x) x \%|>\% quux()
quux <- function(x) x \%|>\% stop()

"tilt" \%|>\% foobar()
foo2<-rlang::last_trace()

foobar <- function(x) x \%!>\% quux()
quux <- function(x) x \%!>\% stop()

"tilt" \%!>\% foobar()
foo3<-rlang::last_trace()

foobar <- function(x) x \%?>\% quux()
quux <- function(x) x \%?>\% stop()

"tilt" \%?>\% foobar()
foo4<-rlang::last_trace()

cons_res(foo1,foo2,foo3,foo4)

## ej4

foo1 <- function() {
  TRUE \%>\% return()
  FALSE
}
foo2 <- function() {
  TRUE \%|>\% return()
  FALSE
}
foo3 <- function() {
  TRUE \%!>\% return()
  FALSE
}
foo4 <- function() {
  TRUE \%?>\% return()
  FALSE
}

cons_res(
  foo1(),
  foo2(),
  foo3(),
  foo4()
)

## ej5

cons_res(
  try("foo" \%>\% list(., .)),
  try("foo" \%|>\% list(., .)),
  try("foo" \%!>\% list(., .)),
  try("foo" \%?>\% list(., .))
)

## ej6

cons_res(
  try({
    stop("oh no") \%>\% try(silent = TRUE)
    "success"
  }),
  try({
    stop("oh no") \%|>\% try(silent = TRUE)
    "success"
  }),
  try({
    stop("oh no") \%!>\% try(silent = TRUE)
    "success"
  }),
  try({
    stop("oh no") \%?>\% try(silent = TRUE)
    "success"
  })
)

factory <- function(x) function() x
foo1 <- TRUE \%>\% factory()
foo2 <- TRUE \%|>\% factory()
foo3 <- TRUE \%!>\% factory()
foo4 <- TRUE \%?>\% factory()

cons_res(foo1(),foo2(),try(foo3()),foo4())

## ej7

faulty <- function() stop("tilt")
f <- function(x) x + 1
g <- function(x) x + 2
h <- function(x) x + 3

faulty() \%>\% f() \%>\% g() \%>\% h()
foo1<-capture.output(traceback())
faulty() \%|>\% f() \%|>\% g() \%|>\% h()
foo2<-capture.output(traceback())
faulty() \%!>\% f() \%!>\% g() \%!>\% h()
foo3<-capture.output(traceback())
faulty() \%?>\% f() \%?>\% g() \%?>\% h()
foo4<-capture.output(traceback())

cons_res(foo1,foo2,foo3,foo4)

dput_source(cat(opps,sep = "\n"))

has_attr(has_attr, "fail")
x <- 10
x \%has_attr\% "a"

y <- list(a = 1, b = 2)
y \%has_name\% "c"
y \%has_name\% c("a", "g", "f")

par(mar = c(1,1,1,1))

rnorm(200) \%>\%
  matrix(ncol = 2) \%T>\%
  plot \%>\%
  colSums


y <- set_names(sample(1:4,10,T),sample(letters[1:10]))

y \%where_name\% c("a", "b", "c")

foo<-function(a,b,c) sum(a*b/c)
foo \%edit_args\% alist(a=1,b = 2,c=3)

y \%~in_nm\% c("a", "b", "c")
y \%~in\% c(2,3)

#\%insd\%
x<-runif(20,0,10)
x \%insd\% c(3,7)
x \%class\% "try-error" \%attr\% list(length = length(x))

x \%<a-\% runif(1)
x
x \%<a-\% runif(10)
x
rm(x)

x \%<c-\% 10
y \%<c-\% 1 + 2
y
z \%<c-\% (1 + 2)
z

rm(list = ls())
x \%<d-\% (a + b)
a <- 10
b <- 100
x

par(mar=c(1,1,1,1))

rnorm(200) \%>\%
  matrix(ncol = 2) \%T>\%
  plot \%>\%
  colSums

x <- c("a", "b", "d")
y <- c("a", "c", "d")

x \%u\% y
x \%n\% y
x \%diff\% y

M <- matrix(1:6, ncol = 2)
4 \%x\% M
diag(1, 3) \%x\% M


x <- 1:4
(z <- x \%*\% x)
drop(z)

y <- diag(x)
z <- matrix(1:12, ncol = 3, nrow = 4)
y \%*\% z
y \%*\% x
x \%*\% z

x <- -1:12
x \%\% 2
x \%/\% 5
x \%\% Inf

}


}
\keyword{internal}
