% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clip_bounds.R
\name{clip_bounds}
\alias{clip_bounds}
\alias{clip_object}
\alias{limits_bounds}
\alias{limits_bounds.default}
\alias{limits_bounds.data.frame}
\alias{limits_object}
\title{rescalar outliers}
\usage{
clip_bounds(.data, ...)

clip_object(
  x,
  cutoff = 0.95,
  fn = c("normal", "simple", "slide"),
  limite = c("ambos", "upper", "lower"),
  method = c("quantile", "dens", "knn", "maha", "box")
)

limits_bounds(.data, ...)

\method{limits_bounds}{default}(.data, ...)

\method{limits_bounds}{data.frame}(.data, ...)

limits_object(x)
}
\arguments{
\item{.data}{dataset}

\item{...}{variables}

\item{cutoff}{toleracia .95}

\item{fn}{funcion base de la busqueda de limites:
"normal", "simple", "slide"}

\item{limite}{que limite se truncara: "ambos", "upper", "lower"}

\item{method}{"quantile", "dens", "knn", "maha", "box"}

\item{times}{veces dentro de una muestra}

\item{rep}{repeticiones de las muestras}
}
\value{
data rescalada de variables
}
\description{
rescalar outliers
}
\examples{



set.seed(7)
data <- datalearn$iris[,1:4]

data <-purrr::map2_dfc(data,c(1,0,0,-1), function(x,y){
  x <- x+ runif(1,-10,10)
  mu <- mean(x)
  s <- sd(x)

  if(y != 0){
    if(y == -1){
      rang <- c(.01,.1)
    } else if(y == 1){
      rang <- c(.9,.99)
    }
    nx<-unscale(x = qcauchy(runif(50,rang[1],rang[2]))+mu,center = 0,scale = s)
    nx <- sample(safe_vec(nx,"rm"),15)
  } else {

    nx<-center_scale(x = qcauchy(runif(50,0,.1))+mu,center = 0,scale = s)
    nx<-c(nx,center_scale(x = 1-qcauchy(runif(50,0,.1))+mu,center = 0,scale = s))
    nx <- sample(safe_vec(nx,"rm"),20)
  }

  x[sample(seq_row(data),length(nx))]  <- nx
  x
})


objs<-clip_bounds(
  .data = data,
  where(is_dblint),
  cutoff = 0.95,
  fn = "slide",
  limite = "lower",
  method = "box",
  times = 3,
  rep = 2
)


purrr::map2(data, predict(objs, data), ~ list(actual = range(.x), new = range(.y)))


objs<-clip_bounds(
  .data = data,
  where(is_dblint),
  cutoff = 0.95,
  fn = "normal",
  limite = "lower",
  method = "dens",
  times = 3,
  rep = 2
)

purrr::map2(data, predict(objs, data), ~ list(actual = range(.x), new = range(.y)))

objs<-clip_bounds(
  .data = data,
  petal_width,petal_length,
  cutoff = 0.95,
  fn = "slide",
  limite = "lower",
  method = "knn",
  times = 3,
  rep = 2
)
purrr::map2(data, predict(objs, data), ~ list(actual = range(.x), new = range(.y)))

objs<-clip_bounds(
  .data = data,
  petal_width,
  cutoff = 0.95,
  fn = "normal",
  limite = "upper",
  method = "maha",
  times = 3,
  rep = 2
)

purrr::map2(data, predict(objs, data), ~ list(actual = range(.x), new = range(.y)))

objs<-clip_bounds(
  .data = data,
  where(is_dblint),
  cutoff = 0.95,
  fn = "simple",
  limite = "upper",
  method = "quantile",
  times = 3,
  rep = 2
)

purrr::map2(data, predict(objs, data), ~ list(actual = range(.x), new = range(.y)))

vec <- safe_vec(rcauchy(1000))
vec <- center_scale(x = vec,center = runif(1,-20,20),scale =runif(1,1,10))


clip_object(
  x = vec,
  cutoff = 0.95,
  fn = "simple",
  limite = "ambos",
  method = "box"
)

clip_object(
  x = vec,
  cutoff = 0.95,
  fn = "normal",
  limite = "upper",
  method = "dens"
)

range(vec)

range(clip_bounds_vec(
  x = vec,
  cutoff = 0.95,
  fn = "normal",
  limite = "ambos",
  method = "knn"
))

range(clip_bounds_vec(
  x = vec,
  cutoff = 0.95,
  fn = "slide",
  limite = "lower",
  method = "maha",
  times = 3,
  rep = 2
))

range(clip_bounds_vec(
  x = vec,
  cutoff = 0.95,
  fn = "slide",
  limite = "lower",
  method = "quantile",
  times = 3,
  rep = 2
))

limits_bounds(.data = data, sepal_length)

limits_bounds(.data = data, sepal_width)

limits_object(x = vec)

limits_object(x = vec)


}
