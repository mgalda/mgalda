% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graphicsR_utils.R, R/graphicsR.R,
%   R/graphicsR_scales_palettes.R, R/graphicsR_stats_geom.R,
%   R/graphicsR_themes.R
\name{gr_graphics}
\alias{gr_graphics}
\alias{scale_pal_gr}
\title{Apply func}
\usage{
scale_pal_gr(
  palette = NULL,
  scale = c("continuous", "discrete", "binned"),
  alpha = 1,
  rev = FALSE,
  mid = 0,
  begin = NULL,
  end = NULL,
  order = NULL,
  n_bin = NULL,
  na.value = "grey50",
  guide = "colourbar",
  aesthetics = c("colour", "color", "fill"),
  ...
)
}
\description{
Apply func
}
\examples{

gr_densfn_animate(
fn = "norm",
args = list(mean = 2:2, sd = 0:1),
limits = c(.1, .9)
)

gr_densfn_animate(
  fn = "cauchy",
  args = list(location = 0:4, scale = 1:4),
  limits = c(.15, .85)
)

library(sf)
london_gpkg

parties <- names(london_gpkg)[4:8]
# set up a colour scale for these if so inclined
colours <- c("deepskyblue", "red", "gold", "purple", "green")
names(colours) <- parties

# calculate the dot positions for each column
london_dots <- calc_dots(
  sf_data = london_gpkg,
  col_names = parties,
  n_per_dot = 1000
)

# plot the results
library(ggplot2)
london_plot <- ggplot() +
  # first add the shape as a background
  geom_sf(data = london_gpkg, fill = "transparent", colour = "white") +
  # add the dots
  geom_point(data = london_dots, aes(lon, lat, colour = variable), size = 0.5) +
  # colour based on the scale already defined
  scale_colour_manual(name = "Party", values = colours) +
  # title
  ggtitle("Dot Density Map of London in the 2017 General Election",
          subtitle = paste("one dot equals", 1000, "people")
  ) +
  theme_dotdensity(palette = "flat_dark") +
  # make the legend shapes bigger so it's possible to see them clearly
  guides(colour = guide_legend(override.aes = list(size = 10)))

# plot
london_plot


# Basic scatter plots
data(cars)
p <- cars \%>\% ggplot() + geom_point(aes(speed, dist))
p

# Set log scale
p \%>\% grf_yscale("log2", .format = TRUE)

# Add legend title to a specific aesthetic
ggplot(mtcars, aes(wt, mpg, colour = cyl, size = hp)) +
  geom_point() +
  gr_legend_add_title(col = "Number of Cylinders")

# Add legend title to all aesthetics
ggplot(mtcars, aes(wt, mpg, colour = cyl)) +
  geom_point() +
  gr_legend_add_title("Number of Cylinders")

# Remove all legends
ggplot(mtcars, aes(wt, mpg, colour = cyl, size = hp)) +
  geom_point() +
  gr_legend_acction(remove_legend = TRUE)

# remove just size legend
ggplot(mtcars, aes(wt, mpg, colour = cyl, size = hp)) +
  geom_point() +
  gr_legend_acction("size",remove_legend = TRUE)

# can also use:
ggplot(mtcars, aes(wt, mpg, colour = cyl, size = hp)) +
  geom_point() +
  gr_legend_acction(size,remove_legend = TRUE)

# Remove more than one
ggplot(mtcars, aes(wt, mpg, colour = cyl, size = hp)) +
  geom_point() +
  gr_legend_acction(size, color,remove_legend = TRUE)


# remove legend title from all aesthetics
ggplot(mtcars, aes(wt, mpg, colour = cyl)) +
  geom_point() +
  gr_legend_acction(remove_tittle = TRUE)



# Move legends to bottom
ggplot(mtcars, aes(wt, mpg, colour = cyl, size = hp)) +
  geom_point() +
  gr_legend_acction(position = "bottom")

# Make legends horizontal
ggplot(mtcars, aes(wt, mpg, colour = cyl, size = hp)) +
  geom_point() +
  gr_legend_acction(direction = "horizontal")

# Justify legends to the bottom and justify to the right
ggplot(mtcars, aes(wt, mpg, colour = cyl, size = hp)) +
  geom_point() +
  gr_legend_acction(position = "bottom",justification = "right")



library(sf)

gr_map_hex(
  data_sf = mgalda::map_hex$data_sf,
  polygon = mgalda::map_hex$polygon,
  cellsize = 5000,
  fill = enero,
  labs_objs = ggplot2::labs(
    title = "Temperatura Superficial Mes de Enero",
    subtitle = "MOD11A1 PROMEDIO 2010-2020.",
    fill = "Regiones Valparaiso y Metropolitana, Chile"
  )
)

library(sf)

data <- mgalda::map_pois$pois

gr_map_pois(
  pois = data,
  col = tipo,
  labs_objs = ggplot2::labs(
    title = toupper("Rutas del desierto de Atacama"),
    subtitle = toupper("Region de Antofagasta, Chile")
  )
)

library(sf)

mgalda::map_grid$points

gr_map_grid(
  polygons = mgalda::map_grid$polygon,
  points = st_as_sf(
    x = mgalda::map_grid$points,
    coords = c("X", "Y"),
    crs = st_crs(mgalda::map_grid$polygon)
  ),
  labs_objs = ggplot2::labs(
    fill = expression(Paradas ~ por ~ km^{
      2
    }),
    title = toupper("Paradas de transporte publico"),
    subtitle = toupper("Santiago de Chile")
  ),
  box_size = 1000
)

library(sf)

gr_map_fromto(
  data = mgalda::map_fromto$data,
  polygon = mgalda::map_fromto$polygon,
  to = ComunaBajada,
  from = ComunaSubida,
  by = Comuna,
  size = ViajeLaboralPromedio,
  labs_objs = ggplot2::labs(
    x = "",
    y = "",
    title = "Origen y Destino 7:00 AM",
    subtitle = "Santiago de Chile"
  )
)

data("mtcars")

p1 <- ggplot2::qplot(mpg, wt, data = mtcars, colour = cyl)
p2 <- ggplot2::qplot(mpg, data = mtcars) + ggplot2::ggtitle("title")
p3 <- ggplot2::qplot(mpg, data = mtcars, geom = "dotplot")


gr_grid(p1, p2, p3)

rm_ls(sssss)

## scale break

d <- data.frame(
  x = 1:20,
  y = c(rnorm(5) + 4, rnorm(5) + 20, rnorm(5) + 5, rnorm(5) + 22)
)

p1 <- ggplot(d, aes(y, x)) +
  geom_col(orientation = "y")
d2 <-
  data.frame(
    x = c(2, 18),
    y = c(7, 26),
    label = c("hello", "world")
  )
p2 <- p1 + scale_x_break(c(7, 17)) +
  geom_text(
    aes(y, x, label = label),
    data = d2,
    hjust = 1,
    colour = "firebrick"
  ) +
  xlab(NULL) + ylab(NULL) + theme_minimal()

p1
p2

# #fig.keep='last'#
g <- ggplot(d, aes(x, y)) +
  geom_col()
g2 <- g + scale_y_break(c(7, 17), scales = 1.5) +
  scale_y_break(c(18, 21), scale = 2) + scale_y_reverse()
g + g2


g + coord_flip() + scale_y_break(c(7, 18))

rm_ls(sssss)
set.seed(2019 - 01 - 19)
d <- data.frame(
  x = 1:20,
  y = c(rnorm(5) + 4, rnorm(5) + 20, rnorm(5) + 5, rnorm(5) + 22),
  group = c(rep("A", 10), rep("B", 10)),
  face = c(rep("C", 5), rep("D", 5), rep("E", 5), rep("F", 5))
)

p <- ggplot(d, aes(x = x, y = y)) +
  geom_col(orientation = "x") +
  scale_y_reverse() +
  facet_wrap(group ~ .,
             scales = "free_y",
             strip.position = "right",
             nrow = 2
  ) +
  coord_flip()
pg <- p +
  scale_y_break(c(7, 17), scales = "free") +
  scale_y_break(c(19, 21), scales = "free")
print(pg)


pg <- pg + aes(fill = group) + theme(legend.position = "bottom")
print(pg)


pg + labs(
  title = "test title",
  subtitle = "test subtitle",
  tag = "A tag",
  caption = "A caption"
) +
  theme_bw() +
  theme(
    legend.position = "bottom",
    strip.placement = "outside",
    axis.title.x = element_text(size = 10),
    plot.title = element_text(size = 22),
    plot.subtitle = element_text(size = 16),
    plot.tag = element_text(size = 10),
    plot.title.position = "plot",
    plot.tag.position = "topright",
    plot.caption = element_text(face = "bold.italic"),
  )

# #message=FALSE, fig.width=10, fig.height=6#
set.seed(2019 - 01 - 19)
d <- data.frame(
  x = 1:20,
  y = c(rnorm(5) + 4, rnorm(5) + 20, rnorm(5) + 5, rnorm(5) + 22),
  group = c(rep("A", 10), rep("B", 10))
)

p <- ggplot(d, aes(x = x, y = y)) +
  scale_y_reverse() +
  scale_x_reverse() +
  geom_col(aes(fill = group)) +
  scale_fill_manual(values = c("#00AED7", "#009E73")) +
  facet_wrap(group ~ .,
             scales = "free_y",
             strip.position = "right",
             nrow = 2
  ) +
  coord_flip()

p +
  scale_y_break(c(7, 10),
                scales = 0.5,
                ticklabels = c(10, 11.5, 13)
  ) +
  scale_y_break(c(13, 17), scales = 0.5, ticklabels = c(17, 18, 19)) +
  scale_y_break(c(19, 21), scales = 1, ticklabels = c(21, 22, 23))

# #fig.width=7, fig.height=5.5#
p <- ggplot(mpg, aes(displ, hwy)) +
  geom_point() +
  scale_y_continuous("mpg (US)",
                     sec.axis = sec_axis(~ . * 1.20, name = "mpg (UK)")
  ) +
  theme(
    axis.title.y.left = element_text(color = "deepskyblue"),
    axis.title.y.right = element_text(color = "orange")
  )
p1 <- p + scale_y_break(breaks = c(20, 30))
p1

set.seed(2019 - 01 - 19)
d <- data.frame(
  x = 1:20,
  y = c(rnorm(5) + 4, rnorm(5) + 20, rnorm(5) + 5, rnorm(5) + 22)
)
p <- ggplot(d, aes(x, y)) +
  geom_col()
x <- p + scale_y_break(c(7, 17))

x + p

# #
set.seed(2019 - 01 - 19)
d <- data.frame(
  x = 1:20,
  y = c(rnorm(5) + 4, rnorm(5) + 20, rnorm(5) + 5, rnorm(5) + 22)
)
p <- ggplot(d, aes(x, y)) +
  geom_col()
p + scale_y_cut(
  breaks = c(7, 18),
  which = c(1, 3),
  scales = c(3, 0.5)
)

# #
p + scale_y_cut(
  breaks = c(7, 18),
  which = c(1, 3),
  scales = c(3, 0.5),
  space = .5
)


rm_ls(sssss)
## geom_tree

set.seed(2016 - 10 - 31)
tr <- ape::rtree(50)
tr$tip.label <- paste(tr$tip.label, tr$tip.label, sep = "_")

p <- ggplot(tr) + geom_tree()
p
d <- data.frame(id = tr$tip.label, v = rnorm(50),w = rcauchy(50))
d

p + tree_layout(layout = "circular")


rm_ls(sssss)
## gr_grid


no_legend <- theme(legend.position = "none")

d <-
  dplyr::group_by(mtcars, cyl) \%>\%
  dplyr::summarize(mean = mean(disp), sd = sd(disp))


d2 <- dplyr::filter(mtcars, cyl != 8) \%>\% dplyr::rename(var = cyl)

p1 <- ggplot(d, aes(x = cyl, y = mean)) +
  geom_col(aes(fill = factor(cyl)), width = 1) +
  no_legend

p1
p2 <- ggplot(d2, aes(var, disp)) +
  geom_jitter(aes(color = factor(var)), width = .5) +
  no_legend

p2
p3 <- ggplot(dplyr::filter(d, cyl != 4), aes(mean, cyl)) +
  geom_point(aes(fill = factor(cyl)), width = .6) +
  coord_flip() +
  no_legend

pp <- list(p1, p2, p3)

gr_grid(gglist = pp, ncol = 1)

pp2 <- lapply(pp, function(p) {
  p + xlim2(limits = c(3, 11))
})
pp3 <- lapply(pp, function(p) {
  p + xlim2(p1)
})

gr_grid(gglist = pp2, ncol = 1)
gr_grid(gglist = pp3, ncol = 1)

rm_ls(sssss)

## gr_scatterpie

set.seed(123)
long <- rnorm(50, sd = 100)
lat <- rnorm(50, sd = 50)
d <- data.frame(long = long, lat = lat)
d <- with(d, d[abs(long) < 150 & abs(lat) < 70, ])
n <- nrow(d)
d$region <- factor(1:n)
d$A <- abs(rnorm(n, sd = 1))
d$B <- abs(rnorm(n, sd = 2))
d$C <- abs(rnorm(n, sd = 3))
d$D <- abs(rnorm(n, sd = 4))
d[1, 4:7] <- d[1, 4:7] * 3
head(d)

# ---- fig.width=10
ggplot() +
  gr_scatterpie(aes(x = long, y = lat, group = region),
                data = d,
                cols = LETTERS[1:4]
  ) +
  coord_equal()

# ---- fig.width=10
d$radius <- 6 * abs(rnorm(n))
p <-
  ggplot() +
  gr_scatterpie(
    aes(
      x = long,
      y = lat,
      group = region,
      r = radius
    ),
    data = d,
    cols = LETTERS[1:4],
    color = NA
  ) +
  coord_equal()

p + gr_scatterpie_legend(d$radius, x = -140, y = -70)

# ---- fig.width=10
world <- map_data("world")
p <- ggplot(world, aes(long, lat)) +
  geom_map(
    map = world,
    aes(map_id = region),
    fill = NA,
    color = "black"
  ) +
  coord_quickmap()
p + gr_scatterpie(
  aes(
    x = long,
    y = lat,
    group = region,
    r = radius
  ),
  data = d,
  cols = LETTERS[1:4],
  color = NA,
  alpha = .8
) +
  gr_scatterpie_legend(d$radius, x = -160, y = -55)

p + gr_scatterpie(
  aes(
    x = long,
    y = lat,
    group = region,
    r = radius
  ),
  data = d,
  cols = LETTERS[1:4],
  color = NA,
  alpha = .8
) +
  gr_scatterpie_legend(
    d$radius,
    x = -160,
    y = -55,
    n = 3,
    labeller = function(x) {
      1000 * x^2
    }
  )

d <- data.frame(x = rnorm(5), y = rnorm(5))
d$A <- abs(rnorm(5, sd = 1))
d$B <- abs(rnorm(5, sd = 2))
d$C <- abs(rnorm(5, sd = 3))
ggplot() +
  gr_scatterpie(aes(x = x, y = y),
                data = d, cols = c("A", "B", "C")) +
  coord_fixed()

d <- tidyr::gather(d, key = "letters", value = "value", -x:-y)
ggplot() +
  gr_scatterpie(aes(x = x, y = y),
                data = d,
                cols = "letters",
                long_format = TRUE
  ) +
  coord_fixed()


tr <- ape::rtree(10)
##  add root point
ggtree(tr) + geom_rootpoint()

ggtree(tr) + geom_rootpoint(
  size = 2,
  color = "red",
  shape = 2
)

## add point by aes(subset)
tr <- ape::rtree(10)
# group tip and node
ggtree(tr) + geom_point2(aes(shape = isTip, color = isTip), size = 3)
# specify a node to display
ggtree(tr) + geom_point2(aes(subset = (node == 15)),
                         shape = 21,
                         size = 5,
                         fill = "green"
)
# specify a tip to display
ggtree(tr) + geom_point2(aes(subset = (label \%in\% c("t1", "t3"))),
                         shape = 21,
                         size = 5,
                         fill = "green"
)


## color point with continuous variables


beast_file <-
  system.file("examples/MCC_FluA_H3.tree", package = "ggtree")

beast_tree <- treeio::read.beast(beast_file)
p <- ggtree(beast_tree) +
  geom_tiplab(hjust = -.1) +
  geom_nodepoint(aes(fill = rate), shape = 21, size = 4) +
  scale_fill_continuous(low = "blue", high = "red") +
  theme_tree2() + theme(legend.position = "right")
p

tr <- ape::rtree(10)
##  add root point
ggtree(tr) + geom_rootpoint()
ggtree(tr) + geom_rootpoint(
  size = 2,
  color = "red",
  shape = 2
)

tr <- ape::rtree(10)
ggtree(tr) + geom_tiplab()

set.seed(2015 - 12 - 21)
tree <- ape::rtree(5)
tree$tip.label[2] <- "long string for test"
label_pad(tree$tip.label)



data(mtcars)
mtcars_z <- dplyr::transmute(
  .data = mtcars,
  model = row.names(mtcars),
  hpz = scale(hp)
)


gr_bardiverging(mtcars_z, model, hpz, text_size = 5)

## Change the colors
gr_bardiverging(
  mtcars_z,
  model,
  hpz,colors = c("darkgreen", "darkred"),
  text_size = 5
)

## Decrease the axis label font size
gr_bardiverging(mtcars_z, model, hpz, text_size = 5)

## Display the axis label text in the same color as the bars
gr_bardiverging(mtcars_z, model, hpz,text_color = c("#1F77B4", "#FF7F0E"))


popeurope <- datalearn$popeurope

gr_dumbbell(popeurope, country, pop1952, pop2007,point_colors =  "Viridis")

# Display only the top 10 countries in terms of population in 2007
gr_dumbbell(popeurope, country, pop1952, pop2007, top_n = 10)

# Change line and point color
gr_dumbbell(popeurope, country, pop1952, pop2007,
            top_n = 10,
            line_color = "lightgray", point_color = c("lightgray", "black")
)
# Add custom legend labels
gr_dumbbell(popeurope, country, pop1952, pop2007,
            top_n = 10,
            legend_labels = c("1952", "2007")
)

# Increase line width and point size
gr_dumbbell(popeurope, country, pop1952, pop2007,
            top_n = 10,
            line_size = 2, point_size = 5
)

d1<- truncate_distr(pdqr_distr(f = "dnorm",mean = 35,sd = 35),upper = 80,lower = 40)
d2 <- pdqr_distr(f = "dunif",min = 0,max = 40)

popch <-
  dplyr::tibble(
    age = c(random_dist(d1, 500), random_dist(d2, 1000)),
    sex = sample(c("H", "M"), 1500, T)
  ) \%>\%
  dplyr::mutate(
    sex = as.factor(sex),
    age = cut(
      x = age,
      breaks = seq(0, 80, 10),
      right = T,
      include.lowest = T
    )
  ) \%>\%
  dplyr::group_by(age, sex) \%>\%
  dplyr::summarise(pop = dplyr::n())

gr_pyramid(popch, age, pop, sex)

## Change bar colors
gr_pyramid(popch, age, pop, sex, bar_colors = c("darkgreen", "darkorange"))

## Change x axis label and add title
gr_pyramid(popch, age, pop, sex, xlab = "Population", title = "Switzerland 2020")

ggplot(iris, aes(x = Petal.Length, group = Species, alpha = Species)) +
  geom_histogram() +
  scale_alpha_focus(Species == "versicolor",alpha_focus = 1,alpha_other = .5)

ggplot(iris, aes(x = Petal.Length, y = Sepal.Length, size = Species)) +
  geom_point() +
  scale_size_focus(Species == "versicolor")

ggplot(iris, aes(x = Species, fill = Species)) +
  geom_bar() +
  scale_fill_focus(Species=="versicolor",Petal.Length > 3.8,color_focus = "red")

ggplot(iris, aes(x = Petal.Length, y = Sepal.Length, color = Species)) +
  geom_point()+
  scale_color_focus(Species=="versicolor",Petal.Length > 3.8)


mtcars2 <-mgalda::group_summarise(mtcars,.groups = c(cyl),median_wt = median(wt),response = "wt")
data(penguins, package = "palmerpenguins")
penguins2 <-
  palmerpenguins::penguins \%>\%
  dplyr::filter(!is.na(sex), !is.na(bill_depth_mm), !is.na(bill_length_mm))


grf_point(bill_length_mm ~ bill_depth_mm, data = penguins2) \%>\%
  grf_abline(
    intercept = 10,
    slope = 2,
    color = "red"
  )

grf_plot(data = penguins2) \%>\%
  grf_point(bill_length_mm ~ bill_depth_mm) \%>\%
  grf_abline(
    intercept = 10:12,
    slope = 2,
    color = c("red", "green", "blue")
  )
grf_point(wt ~ hp,
          size = ~wt,
          color = ~cyl,
          data = mtcars
) \%>\% grf_abline(
  slope = ~0,
  intercept = ~median_wt,
  color = ~cyl,
  data = mtcars2
)
grf_point(wt ~ hp,
          size = ~wt,
          color = ~cyl,
          data = mtcars
) \%>\% grf_abline(
  slope = ~0,
  intercept = ~3,
  color = "green"
)
grf_point(wt ~ hp,
          size = ~wt,
          color = ~cyl,
          data = mtcars
) \%>\% grf_hline(
  yintercept = ~median_wt,
  color = ~cyl,
  data = mtcars2
)
grf_point(mpg ~ hp,
          color = ~cyl,
          size = ~wt,
          data = mtcars
) \%>\% grf_abline(
  color = "red",
  slope = ~ -0.1,
  intercept = ~35
)
grf_point(mpg ~ hp,
          color = ~cyl,
          size = ~wt,
          data = mtcars
) \%>\% grf_abline(
  color = "red",
  slope = ~slope,
  intercept = ~intercept,
  data = data.frame(slope = -0.1, intercept = 33:35)
)
Temps <-
  mosaicData::Weather \%>\% dplyr::filter(city == "Chicago", year == 2016, month <= 4)
grf_ribbon(
  low_temp + high_temp ~ date,
  data = Temps,
  color = "navy",
  alpha = 0.3
)
grf_area(high_temp ~ date,
         data = Temps,
         color = "navy",
         alpha = 0.3
)
grf_ribbon(low_temp + high_temp ~ date,
           data = mosaicData::Weather,
           alpha = 0.3
) + facet_grid(city ~ .)
grf_bar(~species, data = penguins2)
D <- data.frame(group = LETTERS[1:3], count = c(20, 25, 18))
grf_col(count ~ group, data = D)
SomeData <- data.frame(group = LETTERS[1:3], count = c(20, 25, 18))
grf_bar(substance ~ ., data = mosaicData::HELPrct)
grf_col(group ~ count, data = SomeData)
grf_bin2d(eruptions ~ waiting, data = faithful, bins = 15)
grf_point(eruptions ~ waiting, data = faithful) \%>\% grf_contour(density ~ waiting + eruptions, data = faithfuld)
grf_point(eruptions ~ waiting, data = faithful) \%>\% grf_density2d(eruptions ~ waiting, data = faithful)
grf_point(eruptions ~ waiting, data = faithful) \%>\% grf_density_2d(eruptions ~ waiting, data = faithful)
grf_boxplot(bill_length_mm ~ species,
            color = ~species,
            data = penguins2
)
grf_boxplot(
  age ~ substance,
  data = mosaicData::HELPrct,
  color = ~sex,
  position = position_dodge(width = 0.9)
)
grf_boxplot(
  age ~ substance |
    sex,
  data = mosaicData::HELPrct,
  coef = 5,
  width = 0.4
) \%>\% grf_jitter(
  width = 0.2,
  alpha = 0.3,
  seed = 123
)
mdl <- lm(bill_length_mm ~ bill_depth_mm, data = penguins2)
grf_point(bill_length_mm ~ bill_depth_mm, data = penguins2) \%>\% grf_coefline(coef = coef(mdl))
grf_point(bill_length_mm ~ bill_depth_mm, data = penguins2) \%>\% grf_coefline(model = mdl)
grf_density_2d(eruptions ~ waiting,
               data = faithful,
               alpha = 0.5,
               color = "navy"
) \%>\% grf_contour(
  density ~ waiting + eruptions,
  data = faithfuld,
  bins = 10,
  color = "red"
)
grf_jitter(
  avg_drinks ~ age,
  data = mosaicData::HELPrct,
  seed = 123,
  color = ~sex,
  alpha = 0.2,
  width = 0.4,
  height = 0.4
) \%>\% grf_density_2d()
grf_jitter(
  avg_drinks ~ age,
  data = mosaicData::HELPrct,
  seed = 123,
  color = ~sex,
  alpha = 0.2,
  width = 0.4,
  height = 0.4
) \%>\% grf_density2d()
grf_counts(
  substance ~ .,
  data = mosaicData::HELPrct,
  fill = ~sex,
  position = "dodge"
)
grf_percents(
  substance ~ .,
  data = mosaicData::HELPrct,
  fill = ~sex,
  position = "dodge"
)
grf_props(
  substance ~ .,
  data = mosaicData::HELPrct,
  fill = ~sex,
  position = "dodge"
)
grf_counts(
  ~substance,
  data = mosaicData::HELPrct,
  fill = ~sex,
  position = position_dodge()
)
grf_props(
  ~substance,
  data = mosaicData::HELPrct,
  fill = ~sex,
  position = position_dodge()
)
grf_percents(
  ~substance,
  data = mosaicData::HELPrct,
  fill = ~sex,
  position = position_dodge()
)
HELP2 <-
  mosaicData::HELPrct \%>\%
  dplyr::group_by(substance, sex) \%>\%
  dplyr::summarise(
    mean.age = mean(age),
    median.age = median(age),
    max.age = max(age),
    min.age = min(age),
    sd.age = sd(age),
    lo = mean.age - sd.age,
    hi = mean.age + sd.age
  )
grf_jitter(
  age ~ substance,
  data = mosaicData::HELPrct,
  seed = 123,
  alpha = 0.5,
  width = 0.2,
  height = 0,
  color = "skyblue"
) \%>\%
  grf_pointrange(mean.age + lo + hi ~ substance, data = HELP2) \%>\%
  grf_facet_grid(~
                   sex)
grf_jitter(
  age ~ substance,
  data = mosaicData::HELPrct,
  seed = 123,
  alpha = 0.5,
  width = 0.2,
  height = 0,
  color = "skyblue"
) \%>\%
  grf_errorbar(lo + hi ~ substance, data = HELP2, inherit = FALSE) \%>\%
  grf_facet_grid(~
                   sex)
grf_jitter(
  age ~ substance,
  data = mosaicData::HELPrct,
  seed = 123,
  alpha = 0.5,
  width = 0.2,
  height = 0,
  color = "skyblue"
) \%>\%
  grf_boxplot(age ~ substance, data = mosaicData::HELPrct, color = "red") \%>\%
  grf_crossbar(mean.age + lo + hi ~ substance, data = HELP2) \%>\%
  grf_facet_grid(~
                   sex)
HELP2 <-
  mosaicData::HELPrct \%>\%
  dplyr::group_by(substance, sex) \%>\%
  dplyr::summarise(
    mean.age = mean(age),
    median.age = median(age),
    max.age = max(age),
    min.age = min(age),
    sd.age = sd(age),
    lo = mean.age - sd.age,
    hi = mean.age + sd.age
  )
grf_jitter(
  substance ~ age,
  data = mosaicData::HELPrct,
  seed = 123,
  alpha = 0.5,
  height = 0.2,
  width = 0,
  color = "skyblue"
) \%>\%
  grf_pointrange(substance ~ mean.age + lo + hi, data = HELP2) \%>\%
  grf_facet_grid(sex ~ .)
grf_jitter(
  substance ~ age,
  data = mosaicData::HELPrct,
  seed = 123,
  alpha = 0.5,
  height = 0.2,
  width = 0,
  color = "skyblue"
) \%>\%
  grf_pointrange(substance ~ mean.age + lo + hi, data = HELP2) \%>\%
  grf_facet_grid(sex ~ .)
grf_jitter(
  substance ~ age,
  data = mosaicData::HELPrct,
  seed = 123,
  alpha = 0.5,
  height = 0.2,
  width = 0,
  color = "skyblue"
) \%>\%
  grf_errorbar(substance ~ lo + hi, data = HELP2, inherit = FALSE) \%>\%
  grf_facet_grid(sex ~ .)
grf_jitter(
  substance ~ age,
  data = mosaicData::HELPrct,
  seed = 123,
  alpha = 0.5,
  height = 0.2,
  width = 0,
  color = "skyblue"
) \%>\%
  grf_errorbar(substance ~ lo + hi, data = HELP2, inherit = FALSE) \%>\%
  grf_facet_grid(sex ~ .)
grf_jitter(
  substance ~ age,
  data = mosaicData::HELPrct,
  seed = 123,
  alpha = 0.5,
  height = 0.2,
  width = 0,
  color = "skyblue"
) \%>\%
  grf_crossbar(substance ~ mean.age + lo + hi, data = HELP2) \%>\%
  grf_facet_grid(sex ~ .)
SomeData <- data.frame(
  x1 = 2.62,
  x2 = 3.57,
  y1 = 21,
  y2 = 15
)
grf_point(mpg ~ wt, data = mtcars) \%>\%
  grf_curve(y1 + y2 ~ x1 + x2, data = SomeData, color = "navy") \%>\%
  grf_segment(y1 + y2 ~ x1 + x2, data = SomeData, color = "red")
grf_dens(~bill_length_mm, data = penguins2)
grf_dens(~bill_length_mm, data = penguins2, color = ~species)
grf_density(
  ~bill_length_mm,
  fill = ~species,
  data = penguins2,
  alpha = 0.5
)
grf_density(
  ~ bill_length_mm |
    species ~ .,
  fill = ~species,
  data = penguins2,
  alpha = 0.5
)


grf_dist("norm", mean = 10, sd = 2)
grf_dist("norm", fill = ~ (abs(x) <= 2), geom = "area")
grf_dist("norm", fill = "red", kind = "histogram")
grf_dist("norm",
         color = "red",
         kind = "qqstep",
         resolution = 25
) \%>\% grf_dist(
  "norm",
  color = "black",
  kind = "qq",
  resolution = 25,
  size = 2,
  alpha = 0.5
)
grf_dist("binom",
         size = 20,
         prob = 0.25,
         plot_size = 2
)
grf_dist("binom",
         params = list(size = 20, prob = 0.25),
         size = 2
)
grf_dotplot(
  ~bill_length_mm,
  fill = ~species,
  data = penguins2,
  binwidth = 0.2
) \%>\% grf_labs(title = "dotdensity")
grf_dotplot(
  ~bill_length_mm,
  fill = ~species,
  data = penguins2,
  binwidth = 0.2,
  method = "histodot"
) \%>\% grf_labs(title = "histodot")
grf_empty() \%>\% grf_labs(title = "empty")
grf_empty() \%>\%
  grf_point(bill_length_mm ~ bill_depth_mm,
            data = penguins2,
            color = ~species
  ) \%>\%
  grf_labs(title = "empty + point")
grf_frame(c(0, 10) ~ c(0, 5)) \%>\% grf_labs(title = "frame")
grf_point((c(0, 1)) ~ (c(0, 5))) \%>\% grf_blank((c(0, 3)) ~ (c(-2, 7)))
set.seed(12345)
Dat <-
  data.frame(g = rgamma(500, 3, 10), f = rf(500, df1 = 3, df2 = 47))
grf_freqpoly(~bill_length_mm, color = ~species, data = penguins2)
grf_freqpoly(
  ~bill_length_mm,
  color = ~species,
  data = penguins2,
  binwidth = 0.5
)
grf_fun(x~sin(x), color = ~"sin", xlim = pi * c(-2, 2)) \%>\%
  grf_fun(x~cos(x), color = ~
            "cosine", xlim = pi * c(-2, 2))

grf_point(length ~ width, data = mosaicData::KidsFeet) \%>\%
  grf_fun(x~4 * cos(5 * x) + 24,
          color = ~"cosine",
          xlim = pi * c(-2, 2)
  ) \%>\%
  grf_labs(color = "")

grf_fun(x~sin(x), color = ~"sin", xlim = pi * c(-2, 2)) \%>\% grf_fun(x ~ cos(x), color = ~
                                                                      "cosine", xlim = pi * c(-2, 2))

grf_hex(avg_drinks ~ age, data = mosaicData::HELPrct, bins = 15) \%>\% grf_density2d(
  avg_drinks ~ age,
  data = mosaicData::HELPrct,
  color = "yellow",
  alpha = 0.5
)
grf_histogram(~bill_length_mm, data = penguins2)
grf_histogram(
  ~ bill_length_mm |
    species ~ .,
  fill = ~species,
  data = penguins2,
  alpha = 0.5,
  binwidth = 0.25
)
grf_line(births ~ date, data = mosaicData::Births78)
grf_line(births ~ date, color = ~wday, data = mosaicData::Births78)
grf_label(width ~ length,
          data = mosaicData::KidsFeet,
          label = ~name
)
grf_label(
  width ~ length,
  data = mosaicData::KidsFeet,
  label = ~name,
  nudge_x = 0.1,
  nudge_y = -0.05,
  color = ~sex
) \%>\% grf_point()
grf_text(width ~ length,
         data = mosaicData::KidsFeet,
         label = ~name
)
grf_text(
  width ~ length,
  data = mosaicData::KidsFeet,
  label = ~name,
  color = ~sex,
  nudge_x = 0.1,
  nudge_y = -0.05
) \%>\% grf_point()
grf_linerange(low_temp + high_temp ~ date,
              data = mosaicData::Weather,
              color = ~avg_temp
) \%>\%
  grf_facet_grid(city ~ year, scale = "free") \%>\%
  grf_refine(scale_color_viridis_c(
    option = "C",
    begin = 0.1,
    end = 0.8
  ))
grf_pointrange(
  avg_temp + low_temp + high_temp ~ date,
  data = mosaicData::Weather \%>\% head(200),
  color = ~avg_temp
) \%>\%
  grf_facet_grid(city ~ year, scale = "free") \%>\%
  grf_refine(scale_color_viridis_c(
    option = "C",
    begin = 0.1,
    end = 0.8
  ))
grf_point(bill_length_mm ~ bill_depth_mm, data = penguins2)
grf_point(bill_length_mm ~ bill_depth_mm |
            species,
          color = ~species,
          data = penguins2
)
grf_qq(~ age |substance, data = mosaicData::HELPrct) \%>\% grf_qqline()

grf_qqstep(~ age |
             substance, data = mosaicData::HELPrct) \%>\% grf_qqline()
grf_point((1 / hwy) ~ displ, data = mpg) \%>\%
  grf_quantile((1 / hwy) ~ displ, quantiles = 0.5, color = "red") \%>\%
  grf_quantile((1 /
                  hwy) ~ displ, quantiles = c(0.2, 0.8))
grf_raster(density ~ eruptions + waiting, data = faithfuld)
grf_tile(density ~ eruptions + waiting, data = faithfuld) \%>\%
  grf_contour(density ~ eruptions + waiting, color = "yellow") \%>\%
  grf_refine(scale_fill_viridis_c(begin = 0.2))
grf_density2d(eruptions ~ waiting, data = faithful)
grf_rect(1.5 + 3 ~ 40 + 68, fill = "red", alpha = 0.2) \%>\%
  grf_rect(3 + 5.5 ~ 68 + 100, fill = "green", alpha = 0.2) \%>\%
  grf_point(eruptions ~ waiting, data = faithful)

set.seed(1234)
SomeData <- expand.grid(x = 1:10, y = 1:10)
SomeData$angle <- runif(100, 0, 2 * pi)
SomeData$speed <- runif(100, 0, sqrt(0.1 * SomeData$x))
grf_point(y ~ x, data = SomeData) \%>\% grf_spoke(y ~ x, angle = ~angle, radius = 0.5)
grf_point(y ~ x, data = SomeData) \%>\% grf_spoke(y ~ x, angle = ~angle, radius = ~
                                                  speed)
set.seed(1234)
grf_point(bill_length_mm ~ bill_depth_mm, data = penguins2) \%>\%
  grf_rugx(~
             bill_depth_mm, data = penguins2, color = "red") \%>\%
  grf_rugy(bill_length_mm ~ ., data = penguins2, color = "green")
grf_jitter(bill_length_mm ~ bill_depth_mm,
           data = penguins2,
           seed = 123
) \%>\%
  grf_rugx(
    ~bill_depth_mm,
    data = penguins2,
    color = "red",
    position = "jitter",
    seed = 123
  ) \%>\%
  grf_rugy(
    bill_length_mm ~ .,
    data = penguins2,
    color = "green",
    position = "jitter",
    seed = 123
  )
grf_dhistogram(~bill_length_mm, data = penguins2) \%>\% grf_rugx(
  position = "jitter",
  alpha = 0.4,
  color = "red",
  seed = 123
)
grf_point(bill_length_mm ~ bill_depth_mm, data = penguins2) \%>\%
  grf_rug(. ~ bill_depth_mm,
          data = penguins2,
          color = "red",
          inherit = FALSE
  ) \%>\%
  grf_rug(bill_length_mm ~ .,
          data = penguins2,
          color = "green",
          inherit = FALSE
  )
grf_point(bill_length_mm ~ bill_depth_mm, data = penguins2) \%>\%
  grf_rug(. ~ bill_depth_mm,
          data = penguins2,
          color = "red",
          sides = "b"
  ) \%>\%
  grf_rug(bill_length_mm ~ .,
          data = penguins2,
          color = "green",
          sides = "l"
  )
grf_jitter(bill_length_mm ~ bill_depth_mm, data = penguins2) \%>\% grf_rug(
  color = "green",
  sides = "b",
  position = "jitter",
  seed = 123
)
grf_histogram(~eruptions, data = faithful) \%>\%
  grf_rug(~eruptions, data = faithful, color = "red") \%>\%
  grf_rug(~
            eruptions,
          data = faithful,
          color = "navy",
          sides = "t"
  )
grf_histogram(~eruptions, data = faithful) \%>\%
  grf_rug(color = "red") \%>\%
  grf_rug(color = "navy", sides = "t")

grf_dhistogram(~eruptions, data = faithful) \%>\% grf_rug(~eruptions,
                                                        data = faithful,
                                                        color = "red",
                                                        inherit = FALSE
)
grf_dhistogram(~bill_depth_mm, data = penguins2) \%>\% grf_rug(
  0 ~ bill_depth_mm,
  data = penguins2,
  color = "green",
  sides = "b",
  position = "jitter",
  seed = 123
)
grf_dhistogram(~bill_depth_mm, data = penguins2) \%>\% grf_rug(
  0.5 ~ bill_depth_mm,
  data = penguins2,
  color = "green",
  sides = "b",
  position = "jitter",
  seed = 123
)
grf_histogram(~bill_length_mm, data = penguins2) \%>\%
  grf_refine(scale_x_continuous(breaks = discrete_breaks()))

grf_histogram(~bill_length_mm, data = penguins2) \%>\%
  grf_refine(scale_x_continuous(breaks = discrete_breaks(2)))


#rm_ls()

}
\keyword{internal}
