% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/datatransform.R
\name{datatransform}
\alias{datatransform}
\alias{binarize}
\alias{binarize.default}
\alias{binarize.data.frame}
\alias{predict.binarize}
\alias{binarize_vec}
\alias{do_binarize}
\alias{breaktize}
\alias{breaktize.default}
\alias{breaktize.data.frame}
\alias{predict.breaktize}
\alias{breaktize_vec}
\alias{do_breaktize}
\alias{cartdiscretize}
\alias{cartdiscretize.default}
\alias{cartdiscretize.data.frame}
\alias{predict.cartdiscretize}
\alias{do_cartdiscretize}
\alias{cartdiscrmulti}
\alias{cartdiscrmulti.default}
\alias{cartdiscrmulti.data.frame}
\alias{predict.cartdiscrmulti}
\alias{do_cartdiscrmulti}
\alias{categoricaloptim}
\alias{categoricaloptim.default}
\alias{categoricaloptim.data.frame}
\alias{predict.categoricaloptim}
\alias{do_categoricaloptim}
\alias{getdummy}
\alias{getdummy.default}
\alias{predict.getdummy}
\alias{do_getdummy}
\alias{impute_kknn}
\alias{impute_kknn.default}
\alias{impute_kknn.data.frame}
\alias{predict.impute_kknn}
\alias{do_impute_kknn}
\alias{impute_linear}
\alias{impute_linear.default}
\alias{impute_linear.data.frame}
\alias{predict.impute_linear}
\alias{do_impute_linear}
\alias{keeplevels}
\alias{keeplevels.default}
\alias{predict.keeplevels}
\alias{do_keeplevels}
\alias{lenc_glm}
\alias{lenc_glm.default}
\alias{lenc_glm.data.frame}
\alias{predict.lenc_glm}
\alias{do_lenc_glm}
\alias{lenc_lm}
\alias{lenc_lm.default}
\alias{lenc_lm.data.frame}
\alias{predict.lenc_lm}
\alias{do_lenc_lm}
\alias{lenc_mixed}
\alias{lenc_mixed.default}
\alias{predict.lenc_mixed}
\alias{do_lenc_mixed}
\alias{multicollin}
\alias{multicollin.default}
\alias{multicollin.data.frame}
\alias{predict.multicollin}
\alias{do_multicollin}
\alias{near_zero}
\alias{near_zero.default}
\alias{predict.near_zero}
\alias{do_near_zero}
\alias{select_boruta}
\alias{select_boruta.default}
\alias{select_boruta.data.frame}
\alias{predict.select_boruta}
\alias{do_select_boruta}
\alias{select_pca}
\alias{select_vip}
\alias{select_vip.default}
\alias{select_vip.data.frame}
\alias{predict.select_vip}
\alias{do_select_vip}
\alias{simplifycategorical}
\alias{xcorrr}
\alias{xcorrr.default}
\alias{predict.xcorrr}
\alias{do_xcorrr}
\alias{xnls}
\alias{xnls.default}
\alias{xnls.data.frame}
\alias{predict.xnls}
\alias{do_xnls}
\alias{xpca}
\alias{xpca.default}
\alias{xpca.data.frame}
\alias{predict.xpca}
\alias{print.xpca}
\alias{pca_coefs}
\alias{pca_variances}
\alias{pca_var}
\alias{do_xpca}
\alias{xprepro}
\alias{xprepro.default}
\alias{xprepro.data.frame}
\alias{predict.xprepro}
\alias{do_xprepro}
\alias{xrossdummy}
\alias{xrossdummy.default}
\alias{xrossdummy.data.frame}
\alias{predict.xrossdummy}
\alias{do_xrossdummy}
\alias{xstandarice}
\alias{xstandarice.default}
\alias{predict.xstandarice}
\alias{do_xstandarice}
\alias{smoooth_vec_samples}
\alias{smoooth_vec_samples.default}
\alias{smoooth_vec_samples.numeric}
\alias{smoooth_vec_samples.integer}
\alias{predict.smoooth_vec_samples}
\alias{save_pipe}
\alias{save_pipe.default}
\alias{save_pipe.data.frame}
\alias{predict.save_pipe}
\title{datatransform}
\usage{
binarize(.data, ...)

\method{binarize}{default}(.data, ...)

\method{binarize}{data.frame}(.data, algorithm = c("kmean", "mean", "median", "dens"), ...)

\method{predict}{binarize}(object, new_data)

binarize_vec(var, algorithm = c("kmean", "mean", "median", "dens"))

do_binarize(.data, algorithm = c("kmean", "mean", "median", "dens"), ...)

breaktize(.data, ...)

\method{breaktize}{default}(.data, ...)

\method{breaktize}{data.frame}(
  .data = NULL,
  num_breaks = NULL,
  algorithm = c("quantile", "trees", "kmean", "equalwidth"),
  ...
)

\method{predict}{breaktize}(object, new_data)

breaktize_vec(
  var,
  num_breaks,
  algorithm = c("quantile", "trees", "kmean", "equalwidth")
)

do_breaktize(
  .data,
  num_breaks = NULL,
  algorithm = c(quantile, "trees", "kmean", "equalwidth"),
  ...
)

cartdiscretize(.data, y, ...)

\method{cartdiscretize}{default}(.data, ...)

\method{cartdiscretize}{data.frame}(.data, y, ...)

\method{predict}{cartdiscretize}(object, new_data)

do_cartdiscretize(.data, y, ...)

cartdiscrmulti(.data, ...)

\method{cartdiscrmulti}{default}(.data, ...)

\method{cartdiscrmulti}{data.frame}(.data, y, ...)

\method{predict}{cartdiscrmulti}(object, new_data)

do_cartdiscrmulti(.data, y, ...)

categoricaloptim(.data, y, ...)

\method{categoricaloptim}{default}(.data, y, ...)

\method{categoricaloptim}{data.frame}(.data, y, ...)

\method{predict}{categoricaloptim}(object, new_data)

do_categoricaloptim(.data, y, ...)

getdummy(.data, ..., threshold = 0.1)

\method{getdummy}{default}(.data, ..., threshold = 0.1)

\method{predict}{getdummy}(object, new_data)

do_getdummy(.data, ..., threshold = 0.1)

impute_kknn(.data, ...)

\method{impute_kknn}{default}(.data, ...)

\method{impute_kknn}{data.frame}(
  .data,
  to_impute,
  ...,
  options = list(nthread = 1, eps = 0.00000001),
  neighbors = 5
)

\method{predict}{impute_kknn}(object, new_data)

do_impute_kknn(
  .data,
  to_impute,
  ...,
  options = list(nthread = 1, eps = 0.00000001),
  neighbors = 5
)

impute_linear(.data, ...)

\method{impute_linear}{default}(.data, ...)

\method{impute_linear}{data.frame}(.data, to_impute, ...)

\method{predict}{impute_linear}(object, new_data)

do_impute_linear(.data, to_impute, ...)

keeplevels(.data, ..., threshold = 0.05)

\method{keeplevels}{default}(.data, ..., threshold = 0.05)

\method{predict}{keeplevels}(object, new_data)

do_keeplevels(.data, ..., threshold = 0.05)

lenc_glm(.data, y, ...)

\method{lenc_glm}{default}(.data, y, ...)

\method{lenc_glm}{data.frame}(.data, y, ...)

\method{predict}{lenc_glm}(object, new_data)

do_lenc_glm(.data, y, ...)

lenc_lm(.data, y, ...)

\method{lenc_lm}{default}(.data, y, ...)

\method{lenc_lm}{data.frame}(.data, y, ...)

\method{predict}{lenc_lm}(object, new_data)

do_lenc_lm(.data, y, ...)

lenc_mixed(.data, y, ...)

\method{lenc_mixed}{default}(.data, y, ...)

\method{predict}{lenc_mixed}(object, new_data)

do_lenc_mixed(.data, y, ...)

multicollin(.data, ...)

\method{multicollin}{default}(.data, ...)

\method{multicollin}{data.frame}(.data, ..., max_steps = 10, min_var = 0.1, max_cor = 0.9)

\method{predict}{multicollin}(object, new_data)

do_multicollin(.data, ..., max_steps = 10, min_var = 0.1, max_cor = 0.9)

near_zero(.data, ...)

\method{near_zero}{default}(.data, ...)

\method{predict}{near_zero}(object, new_data)

do_near_zero(.data, ...)

select_boruta(
  .data,
  y,
  ...,
  options = list(pValue = 0.01, mcAdj = TRUE, maxRuns = 20, doTrace = 9)
)

\method{select_boruta}{default}(.data, ...)

\method{select_boruta}{data.frame}(
  .data,
  y,
  ...,
  options = list(pValue = 0.01, mcAdj = TRUE, maxRuns = 20, doTrace = 9)
)

\method{predict}{select_boruta}(object, new_data)

do_select_boruta(
  .data,
  y,
  ...,
  options = list(pValue = 0.01, mcAdj = TRUE, maxRuns = 20, doTrace = 9)
)

select_pca(.data, ...)

select_vip(.data, ...)

\method{select_vip}{default}(.data, ...)

\method{select_vip}{data.frame}(.data, y, ..., top_p = floor(ncol(.data)/2), threshold = 0.9)

\method{predict}{select_vip}(object, new_data)

do_select_vip(.data, y, ..., top_p = floor(ncol(.data)/2), threshold = 0.9)

simplifycategorical(.data, ...)

xcorrr(
  .data,
  ...,
  cutoff = 0.9,
  use = "pairwise.complete.obs",
  method = "pearson"
)

\method{xcorrr}{default}(
  .data,
  ...,
  cutoff = 0.9,
  use = "pairwise.complete.obs",
  method = "pearson"
)

\method{predict}{xcorrr}(object, new_data)

do_xcorrr(
  .data,
  ...,
  cutoff = 0.9,
  use = "pairwise.complete.obs",
  method = "pearson"
)

xnls(.data, ...)

\method{xnls}{default}(.data, ...)

\method{xnls}{data.frame}(.data, x, y)

\method{predict}{xnls}(object, new_data)

do_xnls(.data, x, y)

xpca(.data, ...)

\method{xpca}{default}(.data, ...)

\method{xpca}{data.frame}(.data, ..., num_comp = 3, threshold = 0.9)

\method{predict}{xpca}(object, new_data)

\method{print}{xpca}(x)

pca_coefs(x)

pca_variances(x)

pca_var(dataset, scale = TRUE, center = TRUE)

do_xpca(.data, ..., num_comp = 3, threshold = 0.9)

xprepro(.data, ...)

\method{xprepro}{default}(.data, ...)

\method{xprepro}{data.frame}(.data, ..., outcome = NULL, pca = F)

\method{predict}{xprepro}(object, new_data)

do_xprepro(.data, ..., outcome = NULL, pca = F)

xrossdummy(.data, dummy_var, ...)

\method{xrossdummy}{default}(.data, ...)

\method{xrossdummy}{data.frame}(.data, dummy_var, ...)

\method{predict}{xrossdummy}(object, new_data)

do_xrossdummy(.data, dummy_var, ...)

xstandarice(.data, ...)

\method{xstandarice}{default}(.data, ...)

\method{predict}{xstandarice}(object, new_data)

do_xstandarice(.data, ...)

smoooth_vec_samples(x, ...)

\method{smoooth_vec_samples}{default}(x, ...)

\method{smoooth_vec_samples}{numeric}(x, times = 4, rep = 3, na_rm = TRUE, ...)

\method{smoooth_vec_samples}{integer}(x, times = 4, rep = 3, na_rm = TRUE, ...)

\method{predict}{smoooth_vec_samples}(object, new_vec)

save_pipe(.data, ...)

\method{save_pipe}{default}(.data, ...)

\method{save_pipe}{data.frame}(.data, expr)

\method{predict}{save_pipe}(object, new_data)
}
\description{
datatransform
}
\examples{

set.seed(7)
data <- iris[, -5]
data <- dplyr::mutate_all(data, roll_noise) \%>\% as_tbl()
object <- discrkknn(data, everything())

simplifycategorical(.data = mgalda::datalearn$housing_market,where(is_fctchr))
do_simplifycategorical(.data = mgalda::datalearn$housing_market,where(is_fctchr))

simplifycategorical(.data = mgalda::datalearn$ames_lite,where(is_fctchr))
do_simplifycategorical(.data = mgalda::datalearn$ames_lite,where(is_fctchr))

set.seed(7)
data <- mgalda::datalearn$housing_market
binarize(.data = data, algorithm = "kmean", where(is_dblint))
do_binarize(.data = data, algorithm = "kmean", where(is_dblint))
x <- mgalda::datalearn$credit$price
binarize_vec(x)
x <- mgalda::datalearn$credit$price
# binarize_object(var = x)
data <- mgalda::datalearn$housing_market
breaktize(
  .data = data,
  num_breaks = 5,
  algorithm = "quantile",
  where(is_dblint)
)
do_breaktize(
  .data = data,
  num_breaks = 5,
  algorithm = "quantile",
  where(is_dblint)
)
breaktize(
  .data = data,
  num_breaks = c(3, 5),
  algorithm = "quantile",
  sales_price,
  sales_price_coefficient_variance
)
do_breaktize(
  .data = data,
  num_breaks = c(3, 5),
  algorithm = "quantile",
  sales_price,
  sales_price_coefficient_variance
)
x <- mgalda::datalearn$credit$price
breaktize_vec(x, num_breaks = 5)
x <- mgalda::datalearn$credit$price

cartdiscretize(
  .data = mgalda::datalearn$housing_market,
  y = sales_price,
  where(is_dblint)
)
do_cartdiscretize(
  .data = mgalda::datalearn$housing_market,
  y = sales_price,
  where(is_dblint)
)
cartdiscrmulti(
  .data = mgalda::datalearn$housing_market,
  y = sales_price,
  where(is_dblint)
)
do_cartdiscrmulti(
  .data = mgalda::datalearn$housing_market,
  y = sales_price,
  where(is_dblint)
)
categoricaloptim(
  .data = mgalda::datalearn$credit,
  y = status,
  where(is_fctchr)
)
do_categoricaloptim(
  .data = mgalda::datalearn$credit,
  y = status,
  where(is_fctchr)
)
getdummy(mgalda::datalearn$credit, where(is_fctchr))
do_getdummy(mgalda::datalearn$credit, where(is_fctchr))
dataset <- mgalda::datalearn$credit
dataset <- dplyr::select(dataset, where(is_dblint))
impute_kknn(dataset, dplyr::everything(), to_impute = income)
do_impute_kknn(dataset, dplyr::everything(), to_impute = income)
dataset <- mgalda::datalearn$housing_market
dataset <- dplyr::select(dataset, where(is_dblint))
dataset$sales_price[sample(seq_len(nrow(dataset)), 20)] <- NA_real_
impute_linear(dataset, dplyr::everything(), to_impute = sales_price)
do_impute_linear(dataset, dplyr::everything(), to_impute = sales_price)
keeplevels(mgalda::datalearn$credit, where(is_fctchr))
do_keeplevels(mgalda::datalearn$credit, where(is_fctchr))
lenc_glm(
  .data = mgalda::datalearn$credit,
  y = status,
  where(is_fctchr)
)
do_lenc_glm(
  .data = mgalda::datalearn$credit,
  y = status,
  where(is_fctchr)
)
lenc_mixed(
  .data = mgalda::datalearn$credit,
  y = status,
  where(is_fctchr)
)
do_lenc_mixed(
  .data = mgalda::datalearn$credit,
  y = status,
  where(is_fctchr)
)
multicollin(.data = mgalda::datalearn$housing_market, where(is_dblint))
do_multicollin(.data = mgalda::datalearn$housing_market, where(is_dblint))
near_zero(.data = mgalda::datalearn$housing_market, dplyr::everything())
do_near_zero(.data = mgalda::datalearn$housing_market, dplyr::everything())
select_boruta(
  .data = mgalda::datalearn$housing_market,
  y = sales_price,
  dplyr::everything()
)
do_select_boruta(
  .data = mgalda::datalearn$housing_market,
  y = sales_price,
  dplyr::everything()
)
data <- datalearn$housing_market
select_pca(
  .data = data,
  threshold = 0.8,
  num_comp = 4,
  where(is_dblint)
)

select_vip(
  .data = mgalda::datalearn$housing_market,
  y = sales_price,
  dplyr::everything()
)
do_select_vip(
  .data = mgalda::datalearn$housing_market,
  y = sales_price,
  dplyr::everything()
)
x <- runif(10)
data <- data.frame(
  x = x,
  x2 = rescalar(x, c(2, 4)),
  y = rnorm(10)
)
xcorrr(.data = data, everything())
do_xcorrr(.data = data, everything())
xnls(
  mgalda::datalearn$housing_market,
  sales_price_coefficient_variance,
  sales_price
)
do_xnls(
  mgalda::datalearn$housing_market,
  sales_price_coefficient_variance,
  sales_price
)
xpca(.data = mgalda::datalearn$housing_market, dplyr::everything())
do_xpca(.data = mgalda::datalearn$housing_market, dplyr::everything())
xprepro(.data = mgalda::datalearn$housing_market, dplyr::everything())
do_xprepro(.data = mgalda::datalearn$housing_market, dplyr::everything())
xrossdummy(.data = mgalda::datalearn$credit, dummy_var = time, where(is_dblint))
do_xrossdummy(.data = mgalda::datalearn$credit, dummy_var = time, where(is_dblint))
xstandarice(.data = mgalda::datalearn$housing_market, where(is_dblint))
do_xstandarice(.data = mgalda::datalearn$housing_market, where(is_dblint))
smoooth_vec_samples(
  x = mgalda::datalearn$credit$price,
  times = sample(2:10, 1),
  rep = sample(2:4, 1),
  na_rm = T
)
data <- mgalda::datalearn$iris
expr <-
  quote(
    dplyr::mutate(sepal_length = sepal_length / 2) \%>\% dplyr::group_by(species) \%>\% dplyr::summarise_all(mean) \%>\% dplyr::ungroup()
  )
object <- save_pipe(.data = data, expr = expr)
predict(object, data)
}
\keyword{internal}
