% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/solver.R
\name{optim_wflows}
\alias{optim_wflows}
\alias{optimization_wflow}
\alias{add_optim_objective_linear}
\alias{add_optim_objective_fn}
\alias{add_optim_objective}
\alias{add_optim_constraint}
\alias{add_optim_lowerbound}
\alias{add_optim_upperbound}
\alias{update_optimization_direction}
\alias{set_optim_variable_type}
\alias{finalize_optimization_wflow}
\alias{solve_optim}
\alias{opconst_linear}
\alias{opconst_fn}
\alias{opobj_linear}
\alias{opobj_fn}
\alias{use_opmods}
\alias{solve_opmods}
\alias{modelos_opmods}
\alias{use_objecmod}
\alias{use_constrmod}
\alias{facility_location_problem}
\alias{flp_add_facility_data}
\alias{flp_add_demand_data}
\alias{flp_update_cost}
\alias{flp_finalize_wflow}
\alias{flp_solve}
\title{optimization_wflow}
\usage{
optimization_wflow(maximum = FALSE, inf = 100000000000000000000)

add_optim_objective_linear(x, linear = NULL)

add_optim_objective_fn(x, fn, n_var, gradient = NULL, hessian = NULL)

add_optim_objective(x, objv)

add_optim_constraint(x, ...)

add_optim_lowerbound(x, lb)

add_optim_upperbound(x, ub)

update_optimization_direction(x, maximum)

set_optim_variable_type(x, var_type)

finalize_optimization_wflow(x)

solve_optim(x, solver = "auto", control = list(), ..., accuracy = 0.001)

opconst_linear(linear, directions, right_side)

opconst_fn(fn, directions, right_side)

opobj_linear(linear)

opobj_fn(fn, n_var, grad = NULL, hess = NULL)

use_opmods(x, opmods)

solve_opmods(x, accuracy = 0.001)

modelos_opmods()

use_objecmod(x, objt, r_mat, ...)

use_constrmod(x, constr, r_mat = NULL, ...)

facility_location_problem(...)

flp_add_facility_data(x, long, lat, fixedcost, id = NULL)

flp_add_demand_data(x, long, lat, id = NULL)

flp_update_cost(x, fn)

flp_finalize_wflow(x)

flp_solve(x)
}
\description{
optimization_wflow

optim_constraint

optim_objective

optim default models

objectivos pre establecidos

constraint pre definidos

facility_location_problem
}
\examples{
#' # complete pipe


optimization_wflow(maximum = TRUE) \%>\%
  add_optim_objective_linear(linear = c(7, 1, 3)) \%>\%
  add_optim_constraint(opconst_linear(
    linear = c(6, 4, 5),
    directions = "<=",
    right_side = 60
  )) \%>\%
  add_optim_constraint(opconst_linear(
    linear = c(8, 0, 2),
    directions = "<=",
    right_side = 80
  )) \%>\%
  add_optim_constraint(opconst_linear(
    linear = c(9, 1, 7),
    directions = "<=",
    right_side = 70
  )) \%>\%
  set_optim_variable_type(var_type = c("I")) \%>\%
  finalize_optimization_wflow() \%>\%
  solve_optim()
# mlogit

data("Heating", package = "mlogit")
H <- dfidx::dfidx(Heating, choice = "depvar", varying = c(3:12))
coef(mlogit::mlogit(
  depvar ~ 0 | rooms + region | 0,
  data = H,
  reflevel = "gc"
))

mod <- optimization_wflow() \%>\%
  use_opmods(opmods = "mlogit")

mod(data = Heating, var = depvar, mm_formula = ~ rooms + region) \%>\% solve_opmods()


# logisticregression

data("plasma", package = "HSAUR")
m <-
  glm(ESR ~ fibrinogen,
    data = plasma,
    family = binomial(link = "logit")
  )
data <- plasma
data$ESR <- as_int(data$ESR) - 1L
data$globulin <- NULL



mod_log <- optimization_wflow() \%>\%
  use_opmods(opmods = "logisticregression")
mod_log(data, ESR) \%>\% solve_opmods()

mod_mle <- optimization_wflow() \%>\%
  use_opmods(opmods = "mle")
mod_mle(data, ESR) \%>\% solve_opmods()


coef(m)


# ordinaryleastsquares



mod <- optimization_wflow() \%>\%
  use_opmods(opmods = "ordinaryleastsquares")


lm(mpg ~ disp, data = mtcars)
mod(mtcars[, c("mpg", "disp")], mpg, intercept = T) \%>\% solve_opmods()



# leastabsolutedeviation --

mod <- optimization_wflow() \%>\%
  use_opmods(opmods = "leastabsolutedeviation")

mod(data = mtcars, var = mpg) \%>\% solve_opmods()


# lasso


mod_qplasso <- optimization_wflow() \%>\%
  use_opmods(opmods = "qplasso")

mod_cplasso <- optimization_wflow() \%>\%
  use_opmods(opmods = "cplasso")

data(QuickStartExample, package = "glmnet")
q_exam <- cbind(data.frame(y = QuickStartExample$y), x = QuickStartExample$x)
rm(QuickStartExample)

mo <- glmnet::glmnet(
  y = q_exam[["y"]],
  x = q_exam[, -1],
  family = "gaussian",
  alpha = 1,
  lambda = 1,
  intercept = FALSE,
  standardize = FALSE
)
glmnet_beta <- setNames(as_vct(coef(mo)), rownames(coef(mo)))

cp0 <- mod_cplasso(data = q_exam, var = y, lambda = 0) \%>\% solve_opmods()
cp1 <- mod_cplasso(data = q_exam, var = y, lambda = nrow(q_exam)) \%>\% solve_opmods()

qp0 <- mod_qplasso(data = q_exam, var = y, lambda = 0) \%>\% solve_opmods()
qp1 <- mod_qplasso(data = q_exam, var = y, lambda = nrow(q_exam)) \%>\% solve_opmods()

cbind(
  lm = coef(lm(y ~ ., data = q_exam))[-1], qp = qp0$solution,
  cp = cp0$solution
)

cbind(
  lm = round(glmnet_beta, 4), qp = round(c(0, qp1$solution), 4),
  cp = round(c(0, cp1$solution), 4)
)


optimization_wflow() \%>\%
  use_objecmod(objt = "minimax", r_mat = tidyr::drop_na(stocks_data$delta)) \%>\%
  use_constrmod(constr = "budget") \%>\%
  update_optimization_direction(maximum = TRUE) \%>\%
  finalize_optimization_wflow() \%>\%
  solve_optim()

data <- stocks_data$delta \%>\% tidyr::drop_na()

mod <- optimization_wflow() \%>\% use_opmods(opmods = "cvarex2")
mod(data, rhs_cardinal = 6, rhs_budget = 1, alpha = 0.99) \%>\% solve_opmods()

mod <- optimization_wflow() \%>\% use_opmods(opmods = "downmadex1")
mod(data, rhs_budget = 1) \%>\% solve_opmods()

mod <- optimization_wflow() \%>\% use_opmods(opmods = "downvarex1")
mod(data, rhs_budget = 1) \%>\% solve_opmods()

mod <- optimization_wflow() \%>\% use_opmods(opmods = "madex1")
mod(data, rhs_budget = 1) \%>\% solve_opmods()

mod <- optimization_wflow() \%>\% use_opmods(opmods = "markex1")
mod(data, rhs_budget = 1) \%>\% solve_opmods()

mod <- optimization_wflow() \%>\% use_opmods(opmods = "markex2")
mod(data, rhs_budget = 1) \%>\% solve_opmods()

mod <- optimization_wflow() \%>\% use_opmods(opmods = "minimaxex1")
mod(data, rhs_budget = 1) \%>\% solve_opmods()

mod <- optimization_wflow() \%>\% use_opmods(opmods = "omegaex1")
mod(data, tau = 0) \%>\% solve_opmods()

mod <- optimization_wflow() \%>\% use_opmods(opmods = "quaduex1")
mod(data, lambda = 2, rhs_budget = 1) \%>\% solve_opmods()

mod <- optimization_wflow() \%>\% use_opmods(opmods = "rewardex1")
mod(data, index = c(3, 17), rhs_group = .5, rhs_budget = 1) \%>\% solve_opmods()

mod <- optimization_wflow() \%>\% use_opmods(opmods = "sharpeex1")
mod(data, rf = 0) \%>\% solve_opmods()

mod <- optimization_wflow() \%>\% use_opmods(opmods = "cvarex2ci")
mod(data, alpha = c(0.95, 0.99), rhs_budget = 1) \%>\% solve_opmods()

mod <- optimization_wflow() \%>\% use_opmods(opmods = "rewardex2")
mod(
  data,
  index = c(2, 10, 20),
  rhs_budget = 1,
  rhs_group = 0.5,
  rhs_turnover = 0.5,
  rhs_cvar = 0.02,
  alpha = 0.95
) \%>\% solve_opmods()

mod <- optimization_wflow() \%>\% use_opmods(opmods = "rewardex3")
mod(data, rhs_markowitz = 0.5^2, rhs_budget = 1, dir_markowitz = "<=", times = 10) \%>\%
  solve_opmods()
\dontrun{
set.seed(1234)
grid_size <- 1000
n <- 25
customer_locations <- data.frame(
  id = 1:n,
  x = round(runif(n) * grid_size),
  y = round(runif(n) * grid_size)
)
m <- 5
warehouse_locations <- data.frame(
  id = 1:m,
  x = round(runif(m) * grid_size),
  y = round(runif(m) * grid_size),
  fixedcost = round(rnorm(m, mean = prod(grid_size, 100), sd = grid_size))
)


facility_location_problem() \%>\%
  flp_add_facility_data(
    long = warehouse_locations$x,
    lat = warehouse_locations$y,
    fixedcost = warehouse_locations$fixedcost,
    id = warehouse_locations$id
  ) \%>\%
  flp_add_demand_data(
    long = customer_locations$x,
    lat = customer_locations$y,
    id = customer_locations$id
  ) \%>\%
  flp_update_cost(
    fn = function(x) {
      x
    }
  ) \%>\%
  flp_finalize_wflow() \%>\%
  flp_solve()
}

}
