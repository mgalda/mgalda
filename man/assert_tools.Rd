% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assert_inheritance.R
\name{assert_tools}
\alias{assert_tools}
\alias{assert_engine}
\alias{assert_engine_any}
\alias{on_failure}
\alias{assert_function}
\alias{assert_list}
\alias{assert_vector}
\alias{assert_have_same_dims}
\alias{assert_data.frame}
\alias{assert_dblint}
\alias{assert_int}
\alias{assert_dbl}
\alias{assert_chr}
\alias{assert_lgl}
\alias{assert_fct}
\alias{assert_fctchr}
\alias{assert_na_any}
\alias{assert_na_all}
\alias{assert_notempty}
\alias{assert_numeric_all}
\alias{assert_cols_exist}
\alias{assert_value_order}
\alias{assert_unit_range}
\alias{assert_vectors_nums}
\alias{assert_across_df}
\alias{check_inherits}
\alias{check_rango_muestras}
\alias{na_any}
\alias{na_all}
\title{assert_tools}
\usage{
assert_engine(
  ...,
  env = parent.frame(),
  msg = NULL,
  severity = c("stop", "warning", "message", "none")
)

assert_engine_any(
  ...,
  env = parent.frame(),
  msg = NULL,
  severity = c("stop", "warning", "message", "none")
)

on_failure(x)

assert_function(x, severity = getOption("mgalda.severity", "warning"))

assert_list(
  x,
  required_names = NULL,
  exact_length = NULL,
  severity = getOption("mgalda.severity", "warning")
)

assert_vector(
  x,
  .class,
  .len = NULL,
  .min_len = NULL,
  .max_len = NULL,
  .unique = FALSE,
  .sorted = FALSE,
  .names = FALSE,
  severity = getOption("mgalda.severity", "warning")
)

assert_have_same_dims(
  x,
  y,
  severity = getOption("mgalda.severity", "warning"),
  msg = NULL
)

assert_data.frame(
  x,
  .exact_ncol = NULL,
  .min_ncol = NULL,
  .max_ncol = NULL,
  .exact_nrow = NULL,
  .min_nrow = NULL,
  .max_nrow = NULL,
  .exact_rownames = NULL,
  .exact_colnames = NULL,
  .required_rownames = NULL,
  .required_colnames = NULL,
  msg = NULL,
  severity = getOption("mgalda.severity", "warning")
)

assert_dblint(x, severity = getOption("mgalda.severity", "warning"))

assert_int(x, severity = getOption("mgalda.severity", "warning"))

assert_dbl(x, severity = getOption("mgalda.severity", "warning"))

assert_chr(x, severity = getOption("mgalda.severity", "warning"))

assert_lgl(x, severity = getOption("mgalda.severity", "warning"))

assert_fct(x, severity = getOption("mgalda.severity", "warning"))

assert_fctchr(x, severity = getOption("mgalda.severity", "warning"))

assert_na_any(x, severity = getOption("mgalda.severity"))

assert_na_all(x, severity = getOption("mgalda.severity"))

assert_notempty(x, severity = getOption("mgalda.severity", "warning"))

assert_numeric_all(x, severity = getOption("mgalda.severity", "warning"))

assert_cols_exist(
  data,
  ...,
  severity = getOption("mgalda.severity", "warning")
)

assert_value_order(low, high, target = NULL)

assert_unit_range(
  x,
  xmin = 0,
  xmax = 1,
  severity = getOption("mgalda.severity", "warning")
)

assert_vectors_nums(x, y, severity = getOption("mgalda.severity", "warning"))

assert_across_df(
  .data,
  ...,
  predicate,
  severity = getOption("mgalda.severity", "warning"),
  msg = NULL,
  envir = new.env()
)

check_inherits(
  x,
  what,
  severity = c("none", "stop", "warning", "message"),
  .envir = parent.frame()
)

check_rango_muestras(rango)

na_any(x)

na_all(x)
}
\description{
assert_tools
}
\examples{

x <- c("a", "b", "c")

assert_engine(is.character(x), severity = "warning") \%is\% TRUE
assert_engine(length(x) == 3, severity = "warning") \%is\% TRUE
assert_engine(5 < 3, msg = "Five is not smaller than three", severity = "warning") \%is\% FALSE
is_odd <- function(x) {
  assert_engine(is.numeric(x), length(x) == 1)
  x \%\% 2 == 1
}
assert_engine(is_odd(2), severity = "warning") \%is\% FALSE
on_failure(is_odd) <- function(call, env) {
  paste0(deparse(call$x), " is even")
}
assert_engine(is_odd(2), severity = "warning") \%is\% FALSE


data <- mgalda::datalearn$iris

assert_data.frame(data, severity = "warning") \%is\% TRUE
assert_data.frame(data, .exact_ncol = ncol(data), severity = "warning") \%is\% FALSE
assert_data.frame(data, .exact_ncol = nrow(data), severity = "warning") \%is\% TRUE
assert_data.frame(data, .exact_nrow = nrow(data), severity = "warning") \%is\% FALSE
assert_data.frame(data, .required_colnames = "species", severity = "warning") \%is\% TRUE
assert_data.frame(data, .exact_colnames = "species", severity = "warning") \%is\% FALSE
assert_data.frame(data, .exact_colnames = names(data), severity = "warning") \%is\% TRUE
assert_data.frame(x = 1L) \%is\% FALSE

set.seed(7)
x_vec <- runif(10)

x_df <- data.frame(x = runif(10), y = runif(10))

x_matrix <- matrix(data = 0, nrow = 10, ncol = 10)

assert_have_same_dims(x = x_df, y = x_df, severity = "warning") \%is\% TRUE
assert_have_same_dims(x = x_vec, y = x_vec, severity = "warning") \%is\% TRUE
assert_have_same_dims(x = x_matrix, y = x_matrix, severity = "warning") \%is\% TRUE
assert_have_same_dims(x = x_matrix, y = x_df, severity = "warning") \%is\% FALSE
assert_have_same_dims(x = x_vec, y = x_df, severity = "warning") \%is\% FALSE
assert_have_same_dims(x = x_df, y = x_matrix, severity = "warning") \%is\% FALSE
assert_have_same_dims(x = x_vec, y = x_matrix, severity = "warning") \%is\% FALSE
assert_have_same_dims(x = x_df, y = x_vec, severity = "warning") \%is\% FALSE
assert_have_same_dims(x = x_matrix, y = x_vec, severity = "warning") \%is\% FALSE


x <- runif(10)
w <-sample(1:10, size = 100, replace = T)
assert_vector(x = x, .class = "numeric", severity = "warning") \%is\% TRUE
assert_vector(x = x, .class = "numeric", .len = 10, severity = "warning") \%is\% TRUE
assert_vector(x = x, .class = "numeric", .len = 20, severity = "warning") \%is\% FALSE
assert_vector(x = x, .class = "numeric", .min_len = 20, severity = "warning") \%is\% FALSE
assert_vector(x = x, .class = "numeric", .max_len = 2, severity = "warning") \%is\% FALSE
assert_vector(x = x, .class = "numeric", .sorted = T, severity = "warning") \%is\% FALSE
assert_vector(x = x, .class = "numeric", .names = T, severity = "warning") \%is\% FALSE
assert_vector(x = w, .class = "numeric", .unique = TRUE) \%is\% FALSE
assert_vector(x = w, .class = "numeric", .names = TRUE) \%is\% FALSE
assert_vector(x = w, .class = "numeric", .sorted = TRUE) \%is\% FALSE


x <- letters[1:5]
assert_vector(x = x, .class = "numeric", .len = 18, severity = "warning") \%is\% FALSE
assert_vector(x = x, .class = "character", severity = "warning") \%is\% TRUE

assert_list(x = runif(10), severity = "warning") \%is\% FALSE
assert_list(x = list(x = runif(10)), severity = "warning") \%is\% TRUE
assert_list(x = list(x = runif(10)), exact_length = 1, severity = "warning") \%is\% TRUE
assert_list(x = list(x = runif(10)), exact_length = 2, severity = "warning") \%is\% FALSE
assert_list(x = list(x = runif(10)), required_names = "x") \%is\% TRUE
assert_list(x = list(x = runif(10)), required_names = "a") \%is\% FALSE

y <- x <- runif(10)
y[2] <- NA

assert_na_any(x, severity = "warning") \%is\% TRUE
assert_na_any(y, severity = "warning") \%is\% FALSE
assert_na_all(x, severity = "warning") \%is\% TRUE
assert_na_all(y, severity = "warning") \%is\% TRUE
assert_na_all(rep(NA, 5), severity = "warning") \%is\% FALSE

assert_function(mean, severity = "warning") \%is\% TRUE
assert_function(1, severity = "warning") \%is\% FALSE

assert_dblint(x = 1L) \%is\% TRUE
assert_chr(runif(1)) \%is\% FALSE
assert_chr("d") \%is\% TRUE
assert_lgl(runif(1)) \%is\% FALSE
assert_dbl(1L) \%is\% FALSE
assert_int(1L) \%is\% TRUE
assert_int(1.101) \%is\% FALSE
assert_fct(as.factor(stringr::fruit)) \%is\% TRUE

}
\keyword{internal}
